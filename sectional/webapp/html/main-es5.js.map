{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/config/config.component.ts","webpack:///src/app/config/config.component.html","webpack:///src/app/dataservice.service.ts","webpack:///src/app/setup/setup.component.ts","webpack:///src/app/setup/setup.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","ConfigComponent","dataservice","formBuilder","configLoaded","configurationOptions","group","name","configurationOptionNames","item","addControl","control","required","get","valueChanges","pipe","val","subscribe","set_option","key","color","conditions","set_condition","refreshmetars","reset_colors","get_conditions","data","refreshsunrisedata","blink","checked","tasks","optionName","get_option","results","setValue","value","refreshMetars","refreshSunrise","resetColors","DataserviceService","http","error","ErrorEvent","console","message","status","handleError","pixelcount","post","idx","airport","params","condition","option","providedIn","SetupComponent","ledCount","filteredAirports","isLoading","errorMsg","pixel_count","pixelIndex","metar","metar_loading","metar_error","initialSetupFormGroup","min","max","airportSelectionFormGroup","setupcomplete","event","selectedStep","label","selftest","clearpixels","loadPixelData","setpixelcolor","getairportforpixel","icao_airport_code","markAsUntouched","valid","pristine","markAllAsTouched","setairportforpixel","obj","loadMetar","selection","incorrect","load_metar","log","x","length","airportsearch","undefined","stepChanged","airportSelected","previousPixel","nextPixel","completeSetup","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SetupComponent } from './setup/setup.component'\nimport { ConfigComponent } from './config/config.component';\n\nconst routes: Routes = [\n { path: 'setup', component: SetupComponent },\n { path: 'config', component: ConfigComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'sectional-webapp';\n\n  constructor() { \n  }\n\n}\n","<mat-toolbar color=\"primary\">\n  <span>LED Metar Sectional</span>\n  <button [routerLink]=\"['setup']\" mat-button>Setup Wizard</button>\n  <button [routerLink]=\"['config']\" mat-button>Config</button>\n</mat-toolbar>\n\n<section class=\"main-section\">\n  <router-outlet></router-outlet>\n</section>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SetupComponent } from './setup/setup.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatFormFieldModule } from '@angular/material/form-field'\nimport { MatButtonModule } from '@angular/material/button'\nimport { MatInputModule } from '@angular/material/input'\nimport { MatDividerModule} from '@angular/material/divider'\nimport { MatAutocompleteModule } from '@angular/material/autocomplete'\nimport { MatToolbarModule } from '@angular/material/toolbar'\nimport { MatMenuModule } from '@angular/material/menu'\nimport { MatSelectModule } from '@angular/material/select'\nimport { MatCheckboxModule } from '@angular/material/checkbox'\nimport { MatIconModule } from '@angular/material/icon'\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner'\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle'\nimport { MccColorPickerModule } from 'material-community-components'\nimport { ConfigComponent } from './config/config.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SetupComponent,\n    ConfigComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatStepperModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatDividerModule,\n    MatProgressSpinnerModule,\n    MatMenuModule,\n    MatIconModule,\n    MccColorPickerModule,\n    MatToolbarModule,\n    MatCheckboxModule,\n    MatSlideToggleModule\n  ],\n  providers: [\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { DataserviceService } from '../dataservice.service';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { debounceTime, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms'\n\n\n@Component({\n  selector: 'app-config',\n  templateUrl: './config.component.html',\n  styleUrls: ['./config.component.scss']\n})\n\nexport class ConfigComponent implements OnInit {\n  private static configurationOptionNames: string[] = [\"metar_invalid_age\", \"metar_inop_age\", \"sunrise_refresh_interval\", \"metar_refresh_interval\", \"night_lights\", \"pixel_count\" ];\n  public configLoaded: boolean = false\n  public conditions: any\n  public configurationOptions: FormGroup\n\n  constructor(private dataservice: DataserviceService, private formBuilder: FormBuilder) { \n    this.configurationOptions = this.formBuilder.group( {} );\n    for (var item in ConfigComponent.configurationOptionNames) { \n      let name = ConfigComponent.configurationOptionNames[item]\n      this.configurationOptions.addControl(name, this.formBuilder.control(null, Validators.required))\n      this.configurationOptions.get(name)\n      .valueChanges\n      .pipe(debounceTime(350), distinctUntilChanged(), filter((val) => val != null))\n      .subscribe( (val) => { \n        this.dataservice.set_option(name, val).subscribe()\n      })\n    }\n  }\n\n  colorSelected(key, color) {\n    this.conditions[key].color = color\n    this.dataservice.set_condition(key, this.conditions[key]).subscribe()\n  }\n\n  refreshMetars() { \n    this.dataservice.refreshmetars().subscribe()\n  }\n\n  resetColors() { \n    this.dataservice.reset_colors().subscribe(() => {\n      this.dataservice.get_conditions().subscribe((data) => this.conditions = data)\n    })\n  }\n\n  refreshSunrise() { \n    this.dataservice.refreshsunrisedata().subscribe();\n  }\n\n  blinkChanged(key, blink: MatCheckboxChange) { \n    this.conditions[key].blink = blink.checked\n    this.dataservice.set_condition(key, this.conditions[key]).subscribe()\n  }\n\n  ngOnInit(): void {\n    var tasks = []\n    this.dataservice.get_conditions().subscribe((data) => this.conditions = data)\n   \n    for (let item in ConfigComponent.configurationOptionNames) {\n        let optionName: string = ConfigComponent.configurationOptionNames[item]\n        this.dataservice.get_option(optionName).subscribe((data) => {  \n          this.configurationOptions.get(data.results.name).setValue(data.results.value)\n        })\n    }\n  }\n}","<h2>Actions</h2>\n<section>\n        <button mat-button (click)=\"refreshMetars()\" color=\"primary\">Refresh Metars</button>\n        <button mat-button (click)=\"refreshSunrise()\" color=\"primary\">Refresh Sunrise/Sunset Data</button>\n</section>\n\n<h2>Configuration Options</h2>\n<section>\n<form [formGroup]=\"configurationOptions\">\n    <p>\n        <mat-slide-toggle formControlName=\"night_lights\" color=\"primary\">Night Lights</mat-slide-toggle>\n        <span class=\"night-light-hint\">Fade the stations from their condition to NIGHT and NIGHT_DARK during sunset/sunrise.</span>\n    </p>\n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Pixel Count</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"pixel_count\" placeholder=\"\">\n            <mat-hint>Number of pixels</mat-hint>\n        </mat-form-field>\n    </p>\n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Metar Refresh Interval</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"metar_refresh_interval\" placeholder=\"\">\n            <mat-hint>Minutes between fetching METARs</mat-hint>\n        </mat-form-field>\n    </p>\n\n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Metar Invalid Age</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"metar_invalid_age\" placeholder=\"\">\n            <mat-hint>Minutes before metar is considered invalid.</mat-hint>\n        </mat-form-field>\n    </p>\n\n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Metar INOP Interval</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"metar_inop_age\" placeholder=\"\">\n            <mat-hint>Minutes before airport is marked INOP due to metar age</mat-hint>\n        </mat-form-field>\n    </p>\n\n\n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Metar Refresh Interval</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"metar_invalid_age\" placeholder=\"\">\n            <mat-hint>Time before a METAR is considered INVALID.</mat-hint>\n        </mat-form-field>\n    </p>\n  \n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Sunrise/Sunset Data Refresh Interval</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"sunrise_refresh_interval\" placeholder=\"\">\n            <mat-hint>Minutes between fetching Sunrise Data</mat-hint>\n        </mat-form-field>\n    </p>\n</form>\n</section>\n<h2>Condition Colors</h2>\n<section>\n<div *ngFor=\"let condition of conditions | keyvalue\">\n    <span class=\"condition-label\">{{ condition.key }}</span>\n    <mcc-color-picker class=\"condition-color\"  hideUsedColors=\"true\" hideButtons=\"true\" (change)=\"colorSelected(condition.key, $event)\"\n        [selectedColor]=\"condition.value.color\"></mcc-color-picker>\n    <mat-checkbox class=\"blink-checkbox\" (change)=\"blinkChanged(condition.key,$event)\" [checked]=\"condition.value.blink\">Blink</mat-checkbox>\n</div>\n\n<button mat-button color=\"primary\" (click)=\"resetColors()\">Reset Colors to Default</button>\n</section>","import { Injectable } from '@angular/core'\nimport { Observable, throwError } from 'rxjs'\nimport { catchError } from 'rxjs/operators' \nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http' \n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DataserviceService {\n\n  constructor( private http: HttpClient ) { \n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // return an observable with a user-facing error message\n    return throwError(error);\n  };\n\n  public get_pixelcount() : Observable<any> { \n    return this.http.get('/api/pixelcount').pipe(catchError(this.handleError))\n  }\n\n  public set_pixelcount(pixelcount: number) : any { \n    return this.http.post('/api/pixelcount', { 'pixelcount': pixelcount }).pipe(catchError(this.handleError))\n  }\n\n  public selftest() { \n    return this.http.post('/api/selftest', null).pipe(catchError(this.handleError))\n  }\n\n  public getairportforpixel(idx: number) { \n    return this.http.get('/api/pixel/'+idx).pipe(catchError(this.handleError))\n  }\n  \n  public setairportforpixel(idx: number, airport: string) { \n    return this.http.post('/api/pixel/'+idx, { 'icao_airport_code': airport }).pipe(catchError(this.handleError))\n  }\n\n  public setpixelcolor(idx: number, color: string) { \n    return this.http.post('/api/setpixel/'+idx, { 'color': color }).pipe(catchError(this.handleError))\n  }\n\n  public clearpixels() { \n    return this.http.post('/api/clearpixels', {}).pipe(catchError(this.handleError))\n  }\n\n  public airportsearch(value: string) {\n    return this.http.get('/api/airportsearch',{ params: { 'q': value } }).pipe(catchError(this.handleError))\n  }\n\n  public setupcomplete(val:boolean) { \n    return this.http.post('/api/setup_complete', { 'setup_complete': true }).pipe(catchError(this.handleError))\n\n  }\n  public load_metar(airport: string) {\n    return this.http.get('/api/metar/'+airport).pipe(catchError(this.handleError))\n  }\n\n  public refreshsunrisedata() { \n    return this.http.post('/api/refreshsunrise', null).pipe(catchError(this.handleError))\n  }\n  \n  public refreshmetars() { \n    return this.http.post('/api/refreshmetars', null).pipe(catchError(this.handleError))\n  }\n\n  public get_airports() : any { \n  \treturn this.http.get('/api/airports').pipe(catchError(this.handleError))\n  }\n\n  public get_conditions() : any { \n    return this.http.get('/api/conditions').pipe(catchError(this.handleError))\n  }\n\n  public set_condition(condition, color) : any { \n    return this.http.post('/api/condition/'+condition, { 'color': color.color, 'blink': color.blink });\n  }\n\n  public get_option(option) : any { \n    return this.http.get('/api/option/'+option).pipe(catchError(this.handleError))\n  }\n\n  public set_option(option, val) : any { \n    return this.http.post('/api/option/'+option, { 'value': val }).pipe(catchError(this.handleError))\n  }\n\n  public reset_colors() : any { \n    return this.http.post('/api/reset_colors', {}).pipe(catchError(this.handleError))\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms'\nimport { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { DataserviceService } from '../dataservice.service'\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete'\nimport { debounceTime, tap, switchMap, finalize, filter } from 'rxjs/operators';\n\ninterface AirportForPixelResponse {\n  icao_airport_code: string\n}\n\ninterface MetarResponse {\n  icao_airport_code: string\n  metar: string\n}\n\n@Component({\n  selector: 'app-setup',\n  templateUrl: './setup.component.html',\n  styleUrls: ['./setup.component.scss'],\n})\n\nexport class SetupComponent implements OnInit {\n  public initialSetupFormGroup: FormGroup\n  public airportSelectionFormGroup: FormGroup\n  public ledCount: number = 0\n  public filteredAirports = []\n  public isLoading = false\n  public errorMsg = \"\"\n  public pixel_count = 0\n  public pixelIndex = 0\n  public metar: string = null\n  public metar_loading: boolean = false\n  public metar_error: string = null\n\n  constructor(private dataservice: DataserviceService, private formBuilder: FormBuilder) {\n    this.initialSetupFormGroup = this.formBuilder.group({\n      pixel_count: [null, [Validators.required, Validators.min(1), Validators.max(999)]]\n    });\n\n    this.airportSelectionFormGroup = this.formBuilder.group({\n      airport: [null, [Validators.required]]\n    });\n  }\n\n  completeSetup() { \n    this.dataservice.setupcomplete(true).subscribe()\n  }\n\n\n  stepChanged(event: StepperSelectionEvent) {\n    if (event.selectedStep.label == \"setpixelcount\") {\n\n    } else if (event.selectedStep.label == \"testleds\") {\n      this.dataservice.set_option('pixel_count', this.initialSetupFormGroup.get('pixel_count'))\n      this.dataservice.selftest().subscribe()\n\n    } else if (event.selectedStep.label == \"airportassignment\") {\n      this.dataservice.clearpixels().subscribe()\n      this.pixelIndex = 0\n      this.loadPixelData()\n    } else if (event.selectedStep.label == \"finish\") {\n    }\n  }\n\n  loadPixelData() {\n    this.metar = null\n    this.metar_error = null\n    this.metar_loading = null;\n\n    this.dataservice.setpixelcolor(this.pixelIndex, '#f00').subscribe()\n    this.dataservice.getairportforpixel(this.pixelIndex).subscribe((data: AirportForPixelResponse) => {\n      this.airportSelectionFormGroup.get('airport').setValue(data.icao_airport_code)\n      this.airportSelectionFormGroup.markAsUntouched()\n    })\n\n  }\n\n  nextPixel() {\n    if (!this.airportSelectionFormGroup.valid && !this.airportSelectionFormGroup.pristine) {\n      this.airportSelectionFormGroup.markAllAsTouched()\n      return\n    }\n\n    if (this.airportSelectionFormGroup.get('airport').value != null) {\n      this.dataservice.setairportforpixel(this.pixelIndex, this.airportSelectionFormGroup.get('airport').value.icao_airport_code).subscribe()\n    }\n\n    this.dataservice.setpixelcolor(this.pixelIndex, '#000').subscribe()\n\n    if (this.pixelIndex < this.pixel_count) {\n      this.pixelIndex = this.pixelIndex + 1\n      this.loadPixelData()\n    }\n  }\n\n  previousPixel() {\n    if (!this.airportSelectionFormGroup.valid && !this.airportSelectionFormGroup.pristine) {\n      this.airportSelectionFormGroup.markAllAsTouched()\n      return\n    }\n\n    if (this.airportSelectionFormGroup.get('airport').value != null) {\n      this.dataservice.setairportforpixel(this.pixelIndex, this.airportSelectionFormGroup.get('airport').value.icao_airport_code).subscribe()\n    }\n    this.dataservice.setpixelcolor(this.pixelIndex, '#000').subscribe()\n\n    if (this.pixelIndex > 0) {\n      this.pixelIndex = this.pixelIndex - 1\n      this.loadPixelData()\n    }\n  }\n\n  displayFn(obj: any) {\n    return obj\n  }\n\n  airportSelected(event: MatAutocompleteSelectedEvent) {\n    this.loadMetar(event.option.value.icao_airport_code)\n  }\n\n  RequireMatch(control: AbstractControl) {\n    const selection: any = control.value;\n    if (typeof selection === 'string') {\n      return { incorrect: true };\n    }\n    return null;\n  }\n\n  loadMetar(icao_airport_code: string) {\n    if (icao_airport_code == null) {\n      return\n    }\n    this.metar_loading = true\n    this.metar = null\n    this.metar_error = null\n    this.dataservice.load_metar(icao_airport_code).subscribe((results: MetarResponse) => {\n      this.metar_loading = false\n      this.metar = results.metar\n    }, (error) => {\n      console.log(\"METAR Error\", error)\n      this.metar_error = error.error.message\n      this.metar = null\n      this.metar_loading = false\n    });\n  }\n\n\n  ngOnInit() {\n\n    this.airportSelectionFormGroup.get('airport').valueChanges.pipe(debounceTime(500)).\n    subscribe((data) => { \n      this.loadMetar(data)\n    });\n\n    this.airportSelectionFormGroup.get('airport').valueChanges\n      .pipe(\n        debounceTime(500),\n        filter((x: string) => x && x.length >= 2),\n\n        tap(() => {\n          this.errorMsg = \"\";\n          this.filteredAirports = [];\n          this.isLoading = true;\n        }),\n        switchMap(value => this.dataservice.airportsearch(value)\n          .pipe(\n            finalize(() => {\n              this.isLoading = false\n            }),\n          )\n        )\n      )\n      .subscribe(data => {\n        if (data == undefined) {\n          this.errorMsg = \"Unable to get airport data\"\n          this.filteredAirports = [];\n        } else {\n          this.errorMsg = \"\";\n          this.filteredAirports = data as any[]\n        }\n      });\n\n    this.dataservice.get_option('pixel_count').subscribe((data) => {\n      this.pixel_count = data.results.value\n      this.initialSetupFormGroup.get(\"pixel_count\").setValue(data.results.value)\n    })\n  }\n}\n","<h1>\n  Setup Wizard\n</h1>\n<section class=\"body2\">\n  This is a setup wizard which will help you setup your map by specifying the number of LEDs, testing the LEDs and then\n  finally assigning each LED to an airport with a METAR.\n</section>\n\n<mat-vertical-stepper #stepper (selectionChange)=\"stepChanged($event)\">\n  <mat-step [stepControl]=\"initialSetupFormGroup\" label=\"setpixelcount\">\n    <form [formGroup]=\"initialSetupFormGroup\">\n      <ng-template matStepLabel>Number of LEDs</ng-template>\n      <p class=\"mat-body\">First, let us enter how many LEDS you have configured on the map.</p>\n      <mat-form-field>\n        <mat-label>Pixel Count</mat-label>\n        <input matInput placeholder=\"Pixel Count\" formControlName=\"pixel_count\" required>\n        <mat-error>\n          Value must be between 0 and 999\n        </mat-error>\n      </mat-form-field>\n      <div>\n        <button mat-button color=\"primary\" matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n\n  <mat-step label=\"testleds\">\n    <ng-template matStepLabel>Testing LEDs</ng-template>\n    <p>We are now running a self test on all the LEDs. Please make sure they are all working.</p>\n    <div>\n      <button mat-button color=\"primary\" matStepperNext>Continue</button>\n    </div>\n  </mat-step>\n\n  <mat-step label=\"airportassignment\">\n    <ng-template matStepLabel>Airport Assignment</ng-template>\n    <p>We will now go through each LED and specify the airport it represents. The current METAR will be loaded and\n      displayed for you to confirm that airport you have choose has a METAR available.</p>\n    <section>\n      <h2>{{ pixelIndex + 1 }} of {{ pixel_count }}</h2>\n      <form [formGroup]=\"airportSelectionFormGroup\">\n        <mat-form-field>\n          <mat-hint>name or icao identifier</mat-hint>\n          <input matInput placeholder=\"Airport Identifier\" aria-label=\"Airport\" [matAutocomplete]=\"auto\"\n            formControlName=\"airport\">\n          <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"airportSelected($event)\"\n            [displayWith]=\"displayFn\">\n            <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\n            <ng-container *ngIf=\"!isLoading\">\n              <mat-option *ngFor=\"let airport of filteredAirports\" [value]=\"airport.icao_airport_code\">\n                <span><b>{{airport.icao_airport_code}}</b> ({{airport.name}})</span>\n              </mat-option>\n            </ng-container>\n          </mat-autocomplete>\n          <mat-error>\n            Not a valid airport\n          </mat-error>\n        </mat-form-field>\n        <span *ngIf=\"metar\">\n          <span id=\"metar-icon\" class=\"material-icons success\">check_circle</span>\n          {{ metar }}\n        </span>\n        <span *ngIf=\"metar_error\">\n          <span id=\"metar-icon\" class=\"material-icons failure\">error</span>\n          {{metar_error}}\n        </span>\n        <span>\n        <mat-progress-spinner *ngIf=\"metar_loading\" diameter=\"25\" strokeWidth=\"3\" class=\"spinner\"\n            mode=\"indeterminate\">\n        </mat-progress-spinner>\n        </span>\n      </form>\n      <button mat-raised-button (click)=\"previousPixel()\">\n        <span class=\"material-icons\">\n          keyboard_arrow_left\n        </span>Prev Pixel\n      </button>\n      <button mat-raised-button (click)=\"nextPixel()\">\n        Next Pixel<span class=\"material-icons\">\n          keyboard_arrow_right\n        </span></button>\n    </section>\n    <mat-divider></mat-divider>\n    <section>\n      <button mat-button color=\"primary\" matStepperNext>Continue</button>\n    </section>\n  </mat-step>\n\n  <mat-step label=\"finish\">\n    <ng-template matStepLabel>Done</ng-template>\n    <p>Setup is complete. Click Finish to save and start the map.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"completeSetup()\">Finish</button>\n    </div>\n  </mat-step>\n</mat-vertical-stepper>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}