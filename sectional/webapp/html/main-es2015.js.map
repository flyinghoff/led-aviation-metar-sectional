{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/config/config.component.ts","./src/app/config/config.component.html","./src/app/dataservice.service.ts","./src/app/setup/setup.component.ts","./src/app/setup/setup.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SetupComponent } from './setup/setup.component'\nimport { ConfigComponent } from './config/config.component';\n\nconst routes: Routes = [\n { path: 'setup', component: SetupComponent },\n { path: 'config', component: ConfigComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'sectional-webapp';\n\n  constructor() { \n  }\n\n}\n","<mat-toolbar color=\"primary\">\n  <span>LED Metar Sectional</span>\n  <button [routerLink]=\"['setup']\" mat-button>Setup Wizard</button>\n  <button [routerLink]=\"['config']\" mat-button>Config</button>\n</mat-toolbar>\n\n<section class=\"main-section\">\n  <router-outlet></router-outlet>\n</section>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SetupComponent } from './setup/setup.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatFormFieldModule } from '@angular/material/form-field'\nimport { MatButtonModule } from '@angular/material/button'\nimport { MatInputModule } from '@angular/material/input'\nimport { MatDividerModule} from '@angular/material/divider'\nimport { MatAutocompleteModule } from '@angular/material/autocomplete'\nimport { MatToolbarModule } from '@angular/material/toolbar'\nimport { MatMenuModule } from '@angular/material/menu'\nimport { MatSelectModule } from '@angular/material/select'\nimport { MatCheckboxModule } from '@angular/material/checkbox'\nimport { MatIconModule } from '@angular/material/icon'\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner'\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle'\nimport { MccColorPickerModule } from 'material-community-components'\nimport { ConfigComponent } from './config/config.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SetupComponent,\n    ConfigComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatStepperModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatDividerModule,\n    MatProgressSpinnerModule,\n    MatMenuModule,\n    MatIconModule,\n    MccColorPickerModule,\n    MatToolbarModule,\n    MatCheckboxModule,\n    MatSlideToggleModule\n  ],\n  providers: [\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { DataserviceService } from '../dataservice.service';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { debounceTime, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms'\n\n\n@Component({\n  selector: 'app-config',\n  templateUrl: './config.component.html',\n  styleUrls: ['./config.component.scss']\n})\n\nexport class ConfigComponent implements OnInit {\n  private static configurationOptionNames: string[] = [\"metar_invalid_age\", \"metar_inop_age\", \"sunrise_refresh_interval\", \"metar_refresh_interval\", \"night_lights\", \"pixel_count\" ];\n  public configLoaded: boolean = false\n  public conditions: any\n  public configurationOptions: FormGroup\n\n  constructor(private dataservice: DataserviceService, private formBuilder: FormBuilder) { \n    this.configurationOptions = this.formBuilder.group( {} );\n    for (var item in ConfigComponent.configurationOptionNames) { \n      let name = ConfigComponent.configurationOptionNames[item]\n      this.configurationOptions.addControl(name, this.formBuilder.control(null, Validators.required))\n      this.configurationOptions.get(name)\n      .valueChanges\n      .pipe(debounceTime(350), distinctUntilChanged(), filter((val) => val != null))\n      .subscribe( (val) => { \n        this.dataservice.set_option(name, val).subscribe()\n      })\n    }\n  }\n\n  colorSelected(key, color) {\n    this.conditions[key].color = color\n    this.dataservice.set_condition(key, this.conditions[key]).subscribe()\n  }\n\n  refreshMetars() { \n    this.dataservice.refreshmetars().subscribe()\n  }\n\n  resetColors() { \n    this.dataservice.reset_colors().subscribe(() => {\n      this.dataservice.get_conditions().subscribe((data) => this.conditions = data)\n    })\n  }\n\n  refreshSunrise() { \n    this.dataservice.refreshsunrisedata().subscribe();\n  }\n\n  blinkChanged(key, blink: MatCheckboxChange) { \n    this.conditions[key].blink = blink.checked\n    this.dataservice.set_condition(key, this.conditions[key]).subscribe()\n  }\n\n  ngOnInit(): void {\n    var tasks = []\n    this.dataservice.get_conditions().subscribe((data) => this.conditions = data)\n   \n    for (let item in ConfigComponent.configurationOptionNames) {\n        let optionName: string = ConfigComponent.configurationOptionNames[item]\n        this.dataservice.get_option(optionName).subscribe((data) => {  \n          this.configurationOptions.get(data.results.name).setValue(data.results.value)\n        })\n    }\n  }\n}","<h2>Actions</h2>\n<section>\n        <button mat-button (click)=\"refreshMetars()\" color=\"primary\">Refresh Metars</button>\n        <button mat-button (click)=\"refreshSunrise()\" color=\"primary\">Refresh Sunrise/Sunset Data</button>\n</section>\n\n<h2>Configuration Options</h2>\n<section>\n<form [formGroup]=\"configurationOptions\">\n    <p>\n        <mat-slide-toggle formControlName=\"night_lights\" color=\"primary\">Night Lights</mat-slide-toggle>\n        <span class=\"night-light-hint\">Fade the stations from their condition to NIGHT and NIGHT_DARK during sunset/sunrise.</span>\n    </p>\n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Pixel Count</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"pixel_count\" placeholder=\"\">\n            <mat-hint>Number of pixels</mat-hint>\n        </mat-form-field>\n    </p>\n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Metar Refresh Interval</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"metar_refresh_interval\" placeholder=\"\">\n            <mat-hint>Minutes between fetching METARs</mat-hint>\n        </mat-form-field>\n    </p>\n\n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Metar Invalid Age</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"metar_invalid_age\" placeholder=\"\">\n            <mat-hint>Minutes before metar is considered invalid.</mat-hint>\n        </mat-form-field>\n    </p>\n\n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Metar INOP Interval</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"metar_inop_age\" placeholder=\"\">\n            <mat-hint>Minutes before airport is marked INOP due to metar age</mat-hint>\n        </mat-form-field>\n    </p>\n\n\n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Metar Refresh Interval</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"metar_invalid_age\" placeholder=\"\">\n            <mat-hint>Time before a METAR is considered INVALID.</mat-hint>\n        </mat-form-field>\n    </p>\n  \n    <p>\n        <mat-form-field class=\"configurable-option\">\n            <mat-label>Sunrise/Sunset Data Refresh Interval</mat-label>\n            <input matInput matInput type=\"number\" formControlName=\"sunrise_refresh_interval\" placeholder=\"\">\n            <mat-hint>Minutes between fetching Sunrise Data</mat-hint>\n        </mat-form-field>\n    </p>\n</form>\n</section>\n<h2>Condition Colors</h2>\n<section>\n<div *ngFor=\"let condition of conditions | keyvalue\">\n    <span class=\"condition-label\">{{ condition.key }}</span>\n    <mcc-color-picker class=\"condition-color\"  hideUsedColors=\"true\" hideButtons=\"true\" (change)=\"colorSelected(condition.key, $event)\"\n        [selectedColor]=\"condition.value.color\"></mcc-color-picker>\n    <mat-checkbox class=\"blink-checkbox\" (change)=\"blinkChanged(condition.key,$event)\" [checked]=\"condition.value.blink\">Blink</mat-checkbox>\n</div>\n\n<button mat-button color=\"primary\" (click)=\"resetColors()\">Reset Colors to Default</button>\n</section>","import { Injectable } from '@angular/core'\nimport { Observable, throwError } from 'rxjs'\nimport { catchError } from 'rxjs/operators' \nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http' \n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DataserviceService {\n\n  constructor( private http: HttpClient ) { \n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // return an observable with a user-facing error message\n    return throwError(error);\n  };\n\n  public get_pixelcount() : Observable<any> { \n    return this.http.get('/api/pixelcount').pipe(catchError(this.handleError))\n  }\n\n  public set_pixelcount(pixelcount: number) : any { \n    return this.http.post('/api/pixelcount', { 'pixelcount': pixelcount }).pipe(catchError(this.handleError))\n  }\n\n  public selftest() { \n    return this.http.post('/api/selftest', null).pipe(catchError(this.handleError))\n  }\n\n  public getairportforpixel(idx: number) { \n    return this.http.get('/api/pixel/'+idx).pipe(catchError(this.handleError))\n  }\n  \n  public setairportforpixel(idx: number, airport: string) { \n    return this.http.post('/api/pixel/'+idx, { 'icao_airport_code': airport }).pipe(catchError(this.handleError))\n  }\n\n  public setpixelcolor(idx: number, color: string) { \n    return this.http.post('/api/setpixel/'+idx, { 'color': color }).pipe(catchError(this.handleError))\n  }\n\n  public clearpixels() { \n    return this.http.post('/api/clearpixels', {}).pipe(catchError(this.handleError))\n  }\n\n  public airportsearch(value: string) {\n    return this.http.get('/api/airportsearch',{ params: { 'q': value } }).pipe(catchError(this.handleError))\n  }\n\n  public setupcomplete(val:boolean) { \n    return this.http.post('/api/setup_complete', { 'setup_complete': true }).pipe(catchError(this.handleError))\n\n  }\n  public load_metar(airport: string) {\n    return this.http.get('/api/metar/'+airport).pipe(catchError(this.handleError))\n  }\n\n  public refreshsunrisedata() { \n    return this.http.post('/api/refreshsunrise', null).pipe(catchError(this.handleError))\n  }\n  \n  public refreshmetars() { \n    return this.http.post('/api/refreshmetars', null).pipe(catchError(this.handleError))\n  }\n\n  public get_airports() : any { \n  \treturn this.http.get('/api/airports').pipe(catchError(this.handleError))\n  }\n\n  public get_conditions() : any { \n    return this.http.get('/api/conditions').pipe(catchError(this.handleError))\n  }\n\n  public set_condition(condition, color) : any { \n    return this.http.post('/api/condition/'+condition, { 'color': color.color, 'blink': color.blink });\n  }\n\n  public get_option(option) : any { \n    return this.http.get('/api/option/'+option).pipe(catchError(this.handleError))\n  }\n\n  public set_option(option, val) : any { \n    return this.http.post('/api/option/'+option, { 'value': val }).pipe(catchError(this.handleError))\n  }\n\n  public reset_colors() : any { \n    return this.http.post('/api/reset_colors', {}).pipe(catchError(this.handleError))\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms'\nimport { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { DataserviceService } from '../dataservice.service'\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete'\nimport { debounceTime, tap, switchMap, finalize, filter } from 'rxjs/operators';\n\ninterface AirportForPixelResponse {\n  icao_airport_code: string\n}\n\ninterface MetarResponse {\n  icao_airport_code: string\n  metar: string\n}\n\n@Component({\n  selector: 'app-setup',\n  templateUrl: './setup.component.html',\n  styleUrls: ['./setup.component.scss'],\n})\n\nexport class SetupComponent implements OnInit {\n  public initialSetupFormGroup: FormGroup\n  public airportSelectionFormGroup: FormGroup\n  public ledCount: number = 0\n  public filteredAirports = []\n  public isLoading = false\n  public errorMsg = \"\"\n  public pixel_count = 0\n  public pixelIndex = 0\n  public metar: string = null\n  public metar_loading: boolean = false\n  public metar_error: string = null\n\n  constructor(private dataservice: DataserviceService, private formBuilder: FormBuilder) {\n    this.initialSetupFormGroup = this.formBuilder.group({\n      pixel_count: [null, [Validators.required, Validators.min(1), Validators.max(999)]]\n    });\n\n    this.airportSelectionFormGroup = this.formBuilder.group({\n      airport: [null, [Validators.required]]\n    });\n  }\n\n  completeSetup() { \n    this.dataservice.setupcomplete(true).subscribe()\n  }\n\n\n  stepChanged(event: StepperSelectionEvent) {\n    if (event.selectedStep.label == \"setpixelcount\") {\n\n    } else if (event.selectedStep.label == \"testleds\") {\n      this.dataservice.set_option('pixel_count', this.initialSetupFormGroup.get('pixel_count'))\n      this.dataservice.selftest().subscribe()\n\n    } else if (event.selectedStep.label == \"airportassignment\") {\n      this.dataservice.clearpixels().subscribe()\n      this.pixelIndex = 0\n      this.loadPixelData()\n    } else if (event.selectedStep.label == \"finish\") {\n    }\n  }\n\n  loadPixelData() {\n    this.metar = null\n    this.metar_error = null\n    this.metar_loading = null;\n\n    this.dataservice.setpixelcolor(this.pixelIndex, '#f00').subscribe()\n    this.dataservice.getairportforpixel(this.pixelIndex).subscribe((data: AirportForPixelResponse) => {\n      this.airportSelectionFormGroup.get('airport').setValue(data.icao_airport_code)\n      this.airportSelectionFormGroup.markAsUntouched()\n    })\n\n  }\n\n  nextPixel() {\n    if (!this.airportSelectionFormGroup.valid && !this.airportSelectionFormGroup.pristine) {\n      this.airportSelectionFormGroup.markAllAsTouched()\n      return\n    }\n\n    if (this.airportSelectionFormGroup.get('airport').value != null) {\n      this.dataservice.setairportforpixel(this.pixelIndex, this.airportSelectionFormGroup.get('airport').value).subscribe()\n    }\n\n    this.dataservice.setpixelcolor(this.pixelIndex, '#000').subscribe()\n\n    if (this.pixelIndex < this.pixel_count) {\n      this.pixelIndex = this.pixelIndex + 1\n      this.loadPixelData()\n    }\n  }\n\n  previousPixel() {\n    if (!this.airportSelectionFormGroup.valid && !this.airportSelectionFormGroup.pristine) {\n      this.airportSelectionFormGroup.markAllAsTouched()\n      return\n    }\n\n    if (this.airportSelectionFormGroup.get('airport').value != null) {\n      this.dataservice.setairportforpixel(this.pixelIndex, this.airportSelectionFormGroup.get('airport').value.icao_airport_code).subscribe()\n    }\n    this.dataservice.setpixelcolor(this.pixelIndex, '#000').subscribe()\n\n    if (this.pixelIndex > 0) {\n      this.pixelIndex = this.pixelIndex - 1\n      this.loadPixelData()\n    }\n  }\n\n  displayFn(obj: any) {\n    return obj\n  }\n\n  airportSelected(event: MatAutocompleteSelectedEvent) {\n    this.loadMetar(event.option.value.icao_airport_code)\n  }\n\n  RequireMatch(control: AbstractControl) {\n    const selection: any = control.value;\n    if (typeof selection === 'string') {\n      return { incorrect: true };\n    }\n    return null;\n  }\n\n  loadMetar(icao_airport_code: string) {\n    if (icao_airport_code == null) {\n      return\n    }\n    this.metar_loading = true\n    this.metar = null\n    this.metar_error = null\n    this.dataservice.load_metar(icao_airport_code).subscribe((results: MetarResponse) => {\n      this.metar_loading = false\n      this.metar = results.metar\n    }, (error) => {\n      console.log(\"METAR Error\", error)\n      this.metar_error = error.error.message\n      this.metar = null\n      this.metar_loading = false\n    });\n  }\n\n\n  ngOnInit() {\n\n    this.airportSelectionFormGroup.get('airport').valueChanges.pipe(debounceTime(500)).\n    subscribe((data) => { \n      this.loadMetar(data)\n    });\n\n    this.airportSelectionFormGroup.get('airport').valueChanges\n      .pipe(\n        debounceTime(500),\n        filter((x: string) => x && x.length >= 2),\n\n        tap(() => {\n          this.errorMsg = \"\";\n          this.filteredAirports = [];\n          this.isLoading = true;\n        }),\n        switchMap(value => this.dataservice.airportsearch(value)\n          .pipe(\n            finalize(() => {\n              this.isLoading = false\n            }),\n          )\n        )\n      )\n      .subscribe(data => {\n        if (data == undefined) {\n          this.errorMsg = \"Unable to get airport data\"\n          this.filteredAirports = [];\n        } else {\n          this.errorMsg = \"\";\n          this.filteredAirports = data as any[]\n        }\n      });\n\n    this.dataservice.get_option('pixel_count').subscribe((data) => {\n      this.pixel_count = data.results.value\n      this.initialSetupFormGroup.get(\"pixel_count\").setValue(data.results.value)\n    })\n  }\n}\n","<h1>\n  Setup Wizard\n</h1>\n<section class=\"body2\">\n  This is a setup wizard which will help you setup your map by specifying the number of LEDs, testing the LEDs and then\n  finally assigning each LED to an airport with a METAR.\n</section>\n\n<mat-vertical-stepper #stepper (selectionChange)=\"stepChanged($event)\">\n  <mat-step [stepControl]=\"initialSetupFormGroup\" label=\"setpixelcount\">\n    <form [formGroup]=\"initialSetupFormGroup\">\n      <ng-template matStepLabel>Number of LEDs</ng-template>\n      <p class=\"mat-body\">First, let us enter how many LEDS you have configured on the map.</p>\n      <mat-form-field>\n        <mat-label>Pixel Count</mat-label>\n        <input matInput placeholder=\"Pixel Count\" formControlName=\"pixel_count\" required>\n        <mat-error>\n          Value must be between 0 and 999\n        </mat-error>\n      </mat-form-field>\n      <div>\n        <button mat-button color=\"primary\" matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n\n  <mat-step label=\"testleds\">\n    <ng-template matStepLabel>Testing LEDs</ng-template>\n    <p>We are now running a self test on all the LEDs. Please make sure they are all working.</p>\n    <div>\n      <button mat-button color=\"primary\" matStepperNext>Continue</button>\n    </div>\n  </mat-step>\n\n  <mat-step label=\"airportassignment\">\n    <ng-template matStepLabel>Airport Assignment</ng-template>\n    <p>We will now go through each LED and specify the airport it represents. The current METAR will be loaded and\n      displayed for you to confirm that airport you have choose has a METAR available.</p>\n    <section>\n      <h2>{{ pixelIndex + 1 }} of {{ pixel_count }}</h2>\n      <form [formGroup]=\"airportSelectionFormGroup\">\n        <mat-form-field>\n          <mat-hint>name or icao identifier</mat-hint>\n          <input matInput placeholder=\"Airport Identifier\" aria-label=\"Airport\" [matAutocomplete]=\"auto\"\n            formControlName=\"airport\">\n          <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"airportSelected($event)\"\n            [displayWith]=\"displayFn\">\n            <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\n            <ng-container *ngIf=\"!isLoading\">\n              <mat-option *ngFor=\"let airport of filteredAirports\" [value]=\"airport.icao_airport_code\">\n                <span><b>{{airport.icao_airport_code}}</b> ({{airport.name}})</span>\n              </mat-option>\n            </ng-container>\n          </mat-autocomplete>\n          <mat-error>\n            Not a valid airport\n          </mat-error>\n        </mat-form-field>\n        <span *ngIf=\"metar\">\n          <span id=\"metar-icon\" class=\"material-icons success\">check_circle</span>\n          {{ metar }}\n        </span>\n        <span *ngIf=\"metar_error\">\n          <span id=\"metar-icon\" class=\"material-icons failure\">error</span>\n          {{metar_error}}\n        </span>\n        <span>\n        <mat-progress-spinner *ngIf=\"metar_loading\" diameter=\"25\" strokeWidth=\"3\" class=\"spinner\"\n            mode=\"indeterminate\">\n        </mat-progress-spinner>\n        </span>\n      </form>\n      <button mat-raised-button (click)=\"previousPixel()\">\n        <span class=\"material-icons\">\n          keyboard_arrow_left\n        </span>Prev Pixel\n      </button>\n      <button mat-raised-button (click)=\"nextPixel()\">\n        Next Pixel<span class=\"material-icons\">\n          keyboard_arrow_right\n        </span></button>\n    </section>\n    <mat-divider></mat-divider>\n    <section>\n      <button mat-button color=\"primary\" matStepperNext>Continue</button>\n    </section>\n  </mat-step>\n\n  <mat-step label=\"finish\">\n    <ng-template matStepLabel>Done</ng-template>\n    <p>Setup is complete. Click Finish to save and start the map.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"completeSetup()\">Finish</button>\n    </div>\n  </mat-step>\n</mat-vertical-stepper>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}